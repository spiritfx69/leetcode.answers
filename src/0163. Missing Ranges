// C++

class Solution {
public:
    vector<vector<int>> findMissingRanges(vector<int>& nums, int lower, int upper) {
        if (nums.size() == 0) return {{lower, upper}};
        int s = nums.size();
        vector<vector<int>> res;
        if (nums[0] > lower) res.push_back({lower, nums[0] - 1});
        for (int i = 1; i < s; i++){
            if (nums[i] - nums[i - 1] > 1) res.push_back({nums[i - 1] + 1, nums[i] - 1});
        }
        if (nums[s - 1] < upper) res.push_back({nums[s - 1] + 1, upper});
        return res;
    }
};

———————————————————————————————————————————————————————————————

// Java

class Solution {
    public List<List<Integer>> findMissingRanges(int[] nums, int lower, int upper) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        if (nums.length == 0){
            res.add(new ArrayList<Integer>(Arrays.asList(lower, upper)));
            return res;
        }
        int s = nums.length;
        if (nums[0] > lower) res.add(new ArrayList<Integer>(Arrays.asList(lower, nums[0] - 1)));
        for (int i = 1; i < s; i++)
            if (nums[i] - nums[i - 1] > 1)
                res.add(new ArrayList<Integer>(Arrays.asList(nums[i - 1] + 1, nums[i] - 1)));
        if (nums[s - 1] < upper) res.add(new ArrayList<Integer>(Arrays.asList(nums[s - 1] + 1, upper)));
        return res;
    }
}
