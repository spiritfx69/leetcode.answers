// C++

class Solution {
public:
    bool isInterleave(string s1, string s2, string s3) {
        int len1 = s1.length(), len2 = s2.length(), len3 = s3.length();
        if (len1 + len2 != len3) return false;
        vector<vector<bool>> path (len1 + 1, vector<bool>(len2 + 1));
        for (int i = 0; i <= len1; i++)
            for (int j = 0; j <= len2; j++){
                if (i == 0 && j == 0) path[i][j] = true;
                else if (i == 0) path[i][j] = (path[i][j - 1] && s2[j - 1] == s3[i + j - 1]);
                else if (j == 0) path[i][j] = (path[i - 1][j] && s1[i - 1] == s3[i + j - 1]);
                else path[i][j] = (path[i - 1][j] && s1[i - 1] == s3[i + j - 1]) ||
                                  (path[i][j - 1] && s2[j - 1] == s3[i + j - 1]);
            }
        return path[len1][len2];
    }
};

———————————————————————————————————————————————————————————————

// Java

class Solution {
    public boolean isInterleave(String s1, String s2, String s3) {
        int len1 = s1.length(), len2 = s2.length(), len3 = s3.length();
        if (len1 + len2 != len3) return false;
        boolean[][] path = new boolean[len1 + 1][len2 + 1];
        for (int i = 0; i <= len1; i++)
            for (int j = 0; j <= len2; j++){
                if (i == 0 && j == 0) path[i][j] = true;
                else if (i == 0) path[i][j] = (path[i][j - 1] && s2.charAt(j - 1) == s3.charAt(i + j - 1));
                else if (j == 0) path[i][j] = (path[i - 1][j] && s1.charAt(i - 1) == s3.charAt(i + j - 1));
                else path[i][j] = (path[i - 1][j] && s1.charAt(i - 1) == s3.charAt(i + j - 1)) ||
                                  (path[i][j - 1] && s2.charAt(j - 1) == s3.charAt(i + j - 1));
            }
        return path[len1][len2];
    }
}
