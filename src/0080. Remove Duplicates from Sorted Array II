// C++

class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        int r = nums.size() - 1, cnt = 1, total = nums.size();
        for (int i = nums.size() - 2; i >= 0; i--){
            if (nums[i] == nums[i + 1]){
                cnt++;
                if (cnt >= 3){
                    swap(nums[r], nums[i + 1]);
                    r--;
                    total--;
                }
            }
            else cnt = 1;
        }
        sort(nums.begin(), nums.begin() + total);
        return total;
    }
};

———————————————————————————————————————————————————————————————

// Java

class Solution {
    public int removeDuplicates(int[] nums) {
        int r = nums.length - 1, cnt = 1, total = nums.length;
        for (int i = nums.length - 2; i >= 0; i--){
            if (nums[i] == nums[i + 1]){
                cnt++;
                if (cnt >= 3){
                    int temp = nums[i + 1];
                    nums[i + 1] = nums[r];
                    nums[r] = temp;
                    r--;
                    total--;
                }
            }
            else cnt = 1;
        }
        Arrays.sort(nums, 0, total);
        return total;
    }
}
