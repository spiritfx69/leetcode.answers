// C++

class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        int r = matrix.size(), c = matrix[0].size();
        vector<int> res;
        vector<vector<int>> m (r + 2, vector<int>(c + 2));
        for (int i = 0; i <= r + 1; i++)
            for (int j = 0; j <= c + 1; j++) m[i][j] = INT_MAX;
        for (int i = 1; i <= r; i++)
            for (int j = 1; j <= c; j++) m[i][j] = matrix[i - 1][j - 1];
        int cnt = 0, dir = 1, currR = 1, currC = 1;
        int ud[4] = {-1, 0, 1, 0}, lr[4] = {0, 1, 0, -1};
        while (true){
            if (cnt == r * c) break;
            res.push_back(m[currR][currC]);
            cnt++;
            m[currR][currC] = INT_MAX;
            if (dir == 0 && m[currR - 1][currC] == INT_MAX) dir = 1;
            else if (dir == 1 && m[currR][currC + 1] == INT_MAX) dir = 2;
            else if (dir == 2 && m[currR + 1][currC] == INT_MAX) dir = 3;
            else if (dir == 3 && m[currR][currC - 1] == INT_MAX) dir = 0;
            currR += ud[dir];
            currC += lr[dir];
        }
        return res;
    }
};

———————————————————————————————————————————————————————————————

// Java

class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        int r = matrix.length, c = matrix[0].length;
        List<Integer> res = new ArrayList<Integer>();
        int[][] m = new int[r + 2][c + 2];
        for (int i = 0; i <= r + 1; i++)
            for (int j = 0; j <= c + 1; j++) m[i][j] = Integer.MAX_VALUE;
        for (int i = 1; i <= r; i++)
            for (int j = 1; j <= c; j++) m[i][j] = matrix[i - 1][j - 1];
        int cnt = 0, dir = 1, currR = 1, currC = 1;
        int[] ud = {-1, 0, 1, 0}, lr = {0, 1, 0, -1};
        while (true){
            if (cnt == r * c) break;
            res.add(m[currR][currC]);
            cnt++;
            m[currR][currC] = Integer.MAX_VALUE;
            if (dir == 0 && m[currR - 1][currC] == Integer.MAX_VALUE) dir = 1;
            else if (dir == 1 && m[currR][currC + 1] == Integer.MAX_VALUE) dir = 2;
            else if (dir == 2 && m[currR + 1][currC] == Integer.MAX_VALUE) dir = 3;
            else if (dir == 3 && m[currR][currC - 1] == Integer.MAX_VALUE) dir = 0;
            currR += ud[dir];
            currC += lr[dir];
        }
        return res;
    }
}
