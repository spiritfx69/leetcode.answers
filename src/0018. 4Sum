// C++

class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        if (nums.size() < 4) return {};
        sort(nums.begin(), nums.end());
        vector<vector<int>> res;
        for (int i = 0; i < nums.size() - 3; i++){
            if (i > 0 && nums[i] == nums[i - 1]) continue;
            for (int j = i + 1; j < nums.size() - 2; j++){
                if (j > i + 1 && nums[j] == nums[j - 1]) continue;
                int l = j + 1, r = nums.size() - 1;
                while (l < r){
                    long long sum = (long long) nums[i] + (long long) nums[j] + (long long) nums[l] + (long long) nums[r];
                    if (sum < (long long) target){
                        l++;
                        while (l < r && nums[l - 1] == nums[l]) l++;
                    }
                    else if (sum > (long long) target){
                        r--;
                        while (l < r && nums[r + 1] == nums[r]) r--;
                    }
                    else{
                        res.push_back({nums[i], nums[j], nums[l], nums[r]});
                        r--;
                        while (l < r && nums[r + 1] == nums[r]) r--;
                    }
                }
            }
        }
        return res;
    }
};

———————————————————————————————————————————————————————————————

// Java

class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        if (nums.length < 4) return res;
        Arrays.sort(nums);
        for (int i = 0; i < nums.length - 3; i++){
            if (i > 0 && nums[i] == nums[i - 1]) continue;
            for (int j = i + 1; j < nums.length - 2; j++){
                if (j > i + 1 && nums[j] == nums[j - 1]) continue;
                int l = j + 1, r = nums.length - 1;
                while (l < r){
                    long sum = (long) nums[i] + (long) nums[j] + (long) nums[l] + (long) nums[r];
                    if (sum < (long) target){
                        l++;
                        while (l < r && nums[l - 1] == nums[l]) l++;
                    }
                    else if (sum > (long) target){
                        r--;
                        while (l < r && nums[r + 1] == nums[r]) r--;
                    }
                    else{
                        List<Integer> n = new ArrayList<Integer>();
                        n.add(nums[i]);
                        n.add(nums[j]);
                        n.add(nums[l]);
                        n.add(nums[r]);
                        res.add(n);
                        r--;
                        while (l < r && nums[r + 1] == nums[r]) r--;
                    }
                }
            }
        }
        return res;
    }
}
