// C++

class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
        int maxDiff = INT_MAX, res;
        sort(nums.begin(), nums.end());
        for (int i = 0; i < nums.size() - 2; i++){
            if (i > 0 && nums[i - 1] == nums[i]) continue;
            int l = i + 1, r = nums.size() - 1;
            while (l < r){
                int sum = nums[i] + nums[l] + nums[r];
                if (abs(sum - target) < maxDiff){
                    maxDiff = abs(sum - target);
                    res = sum;
                }
                if (sum > target) r--;
                else if (sum < target) l++;
                else return target;
            }
        }
        return res;
    }
};

———————————————————————————————————————————————————————————————

// Java

class Solution {
    public int threeSumClosest(int[] nums, int target) {
        int maxDiff = Integer.MAX_VALUE, res = 0;
        Arrays.sort(nums);
        for (int i = 0; i < nums.length - 2; i++){
            if (i > 0 && nums[i - 1] == nums[i]) continue;
            int l = i + 1, r = nums.length - 1;
            while (l < r){
                int sum = nums[i] + nums[l] + nums[r];
                if (Math.abs(sum - target) < maxDiff){
                    maxDiff = Math.abs(sum - target);
                    res = sum;
                }
                if (sum > target) r--;
                else if (sum < target) l++;
                else return target;
            }
        }
        return res;
    }
}
