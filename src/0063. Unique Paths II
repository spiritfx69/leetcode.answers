// C++

class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int r = obstacleGrid.size(), c = obstacleGrid[0].size();
        vector<vector<int>> res (r, vector<int>(c));
        for (int i = 0; i < res.size(); i++){
            if (obstacleGrid[i][0] == 1) break;
            res[i][0] = 1;
        }
        for (int i = 0; i < res[0].size(); i++){
            if (obstacleGrid[0][i] == 1) break;
            res[0][i] = 1;
        }
        for (int i = 1; i < res.size(); i++)
            for (int j = 1; j < res[0].size(); j++){
                if (obstacleGrid[i][j] == 1) continue;
                res[i][j] = res[i - 1][j] + res[i][j - 1];
            }
        return res[r - 1][c - 1];
    }
};

———————————————————————————————————————————————————————————————

// Java

class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int r = obstacleGrid.length, c = obstacleGrid[0].length;
        int[][] res = new int[r][c];
        for (int i = 0; i < res.length; i++){
            if (obstacleGrid[i][0] == 1) break;
            res[i][0] = 1;
        }
        for (int i = 0; i < res[0].length; i++){
            if (obstacleGrid[0][i] == 1) break;
            res[0][i] = 1;
        }
        for (int i = 1; i < res.length; i++)
            for (int j = 1; j < res[0].length; j++){
                if (obstacleGrid[i][j] == 1) continue;
                res[i][j] = res[i - 1][j] + res[i][j - 1];
            }
        return res[r - 1][c - 1];
    }
}
