// C++

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        ListNode temp(0);
        ListNode* t = &temp;
        while (list1 != nullptr && list2 != nullptr){
            if (list1->val <= list2->val){
                t->next = list1;
                list1 = list1->next;
            }
            else{
                t->next = list2;
                list2 = list2->next;
            }
            t = t->next;
        }
        t->next = list1 == nullptr ? list2 : list1;
        return temp.next;
    }
};

———————————————————————————————————————————————————————————————

// Java

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ListNode temp = new ListNode(0);
        ListNode t = temp;
        while (list1 != null && list2 != null){
            if (list1.val <= list2.val){
                t.next = list1;
                list1 = list1.next;
            }
            else{
                t.next = list2;
                list2 = list2.next;
            }
            t = t.next;
        }
        t.next = list1 == null ? list2 : list1;
        return temp.next;
    }
}
