// C++

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target)
    {
        map <int, int> n;
        for (int i = 0; i < nums.size(); i++){
            int diff = target - nums[i];
            if (n.find(diff) != n.end()) return {n[diff], i};
            n[nums[i]] = i;
        }
        return {};
    }
};

———————————————————————————————————————————————————————————————

// Java

class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map<Integer, Integer> n = new HashMap<>();
        for (int i = 0; i < nums.length; i++){
            int diff = target - nums[i];
            if (n.containsKey(diff)) return new int[] {n.get(diff), i};
            n.put(nums[i], i);
        }
        return null;
    }
}
