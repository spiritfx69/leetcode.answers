// C++

class Solution {
public:
    string newRLE(string s){
        int cnt = 1;
        char ch = s[0];
        string rle = "";
        for (int i = 1; i < s.length(); i++){
            if (s[i] == s[i - 1]) cnt++;
            else{
                rle += to_string(cnt) + ch;
                ch = s[i];
                cnt = 1;
            }
        }
        rle += to_string(cnt) + ch;
        return rle;
    }

    string countAndSay(int n) {
        vector<string> r (n + 1);
        r[1] = "1";
        for (int i = 2; i <= n; i++) r[i] = newRLE(r[i - 1]);
        return r[n];
    }
};

———————————————————————————————————————————————————————————————

// Java

class Solution {
    public String newRLE(String s){
        int cnt = 1;
        char ch = s.charAt(0);
        String rle = "";
        for (int i = 1; i < s.length(); i++){
            Character c1 = s.charAt(i);
            Character c2 = s.charAt(i - 1);
            if (c1.equals(c2)) cnt++;
            else{
                rle += Integer.toString(cnt) + ch;
                ch = s.charAt(i);
                cnt = 1;
            }
        }
        rle += Integer.toString(cnt) + ch;
        return rle;
    }

    public String countAndSay(int n) {
        List<String> r = new ArrayList<String>(n + 1);
        r.add("");
        r.add("1");
        for (int i = 2; i <= n; i++){
            r.add(newRLE(r.get(i - 1)));
        }
        return r.get(n);
    }
}
