// C++

class Solution {
public:
    void comb(vector<vector<int>>& res, vector<int>& num, int start, int n, int k){
        if (num.size() == k){
            res.push_back(num);
            return;
        }
        for (int i = start; i <= n; i++){
            num.push_back(i);
            comb(res, num, i + 1, n, k);
            num.pop_back();
        }
    }

    vector<vector<int>> combine(int n, int k) {
        vector<int> num;
        vector<vector<int>> res;
        comb(res, num, 1, n, k);
        return res;
    }
};

———————————————————————————————————————————————————————————————

// Java

class Solution {
    void comb(List<List<Integer>> res, List<Integer> num, int start, int n, int k){
        if (num.size() == k){
            res.add(new ArrayList<Integer>(num));
            return;
        }
        for (int i = start; i <= n; i++){
            num.add(i);
            comb(res, num, i + 1, n, k);
            num.remove(num.size() - 1);
        }
    }

    public List<List<Integer>> combine(int n, int k) {
        List<Integer> num = new ArrayList<Integer>();
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        comb(res, num, 1, n, k);
        return res;
    }
}
