// C++

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int l = 0, r = matrix.size() * matrix[0].size() - 1;
        while (l <= r){
            int m = (l + r) / 2;
            int row = m / matrix[0].size(), col = m % matrix[0].size();
            if (matrix[row][col] < target) l = m + 1;
            else if (matrix[row][col] > target) r = m - 1;
            else return true;
        }
        return false;
    }
};

———————————————————————————————————————————————————————————————

// Java

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int l = 0, r = matrix.length * matrix[0].length - 1;
        while (l <= r){
            int m = (l + r) / 2;
            int row = m / matrix[0].length, col = m % matrix[0].length;
            if (matrix[row][col] < target) l = m + 1;
            else if (matrix[row][col] > target) r = m - 1;
            else return true;
        }
        return false;
    }
}
