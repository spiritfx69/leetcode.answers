// C++

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        vector<vector<int>> res;
        for (int i = 0; i < nums.size() - 2; i++){
            if (i > 0 && nums[i - 1] == nums[i]) continue;
            int l = i + 1, r = nums.size() - 1;
            while (l < r){
                if (nums[i] + nums[l] + nums[r] > 0){
                    r--;
                    while (l < r && nums[r] == nums[r + 1]) r--;
                }
                else if (nums[i] + nums[l] + nums[r] < 0){
                    l++;
                    while (l < r && nums[l] == nums[l - 1]) l++;
                }
                else{
                    res.push_back({nums[i], nums[l], nums[r]});
                    r--;
                    while (l < r && nums[r] == nums[r + 1]) r--;
                }
            }
        }
        return res;
    }
};

———————————————————————————————————————————————————————————————

// Java

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        for (int i = 0; i < nums.length - 2; i++){
            if (i > 0 && nums[i - 1] == nums[i]) continue;
            int l = i + 1, r = nums.length - 1;
            while (l < r){
                if (nums[i] + nums[l] + nums[r] > 0){
                    r--;
                    while (l < r && nums[r] == nums[r + 1]) r--;
                }
                else if (nums[i] + nums[l] + nums[r] < 0){
                    l++;
                    while (l < r && nums[l] == nums[l - 1]) l++;
                }
                else{
                    List<Integer> n = new ArrayList<Integer>();
                    Collections.addAll(n, nums[i], nums[l], nums[r]);
                    res.add(n);
                    r--;
                    while (l < r && nums[r] == nums[r + 1]) r--;
                }
            }
        }
        return res;
    }
}
