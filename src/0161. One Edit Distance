// C++

class Solution {
public:
    bool deleted(string s, string t){
        for (int i = 0; i < s.length(); i++)
            if (s[i] != t[i]) return s.substr(i) == t.substr(i + 1);
        return true;
    }

    bool replaced(string s, string t){
        int cnt = 0;
        for (int i = 0; i < s.length(); i++)
            if (s[i] != t[i]){
                cnt++;
                if (cnt == 2) return false;
            }
        return true;
    }

    bool isOneEditDistance(string s, string t) {
        if (s == t) return false;
        if (s.length() > t.length()) swap(s, t);
        if (t.length() - s.length() > 1) return false;
        if (s.length() != t.length()) return deleted(s, t);
        else return replaced(s, t);
    }
};

———————————————————————————————————————————————————————————————

// Java

class Solution {
    public boolean deleted(String s, String t){
        for (int i = 0; i < s.length(); i++)
            if (s.charAt(i) != t.charAt(i))
                return s.substring(i).equals(t.substring(i + 1));
        return true;
    }

    public boolean replaced(String s, String t){
        int cnt = 0;
        for (int i = 0; i < s.length(); i++)
            if (s.charAt(i) != t.charAt(i)){
                cnt++;
                if (cnt == 2) return false;
            }
        return true;
    }

    public boolean isOneEditDistance(String s, String t) {
        if (s.equals(t)) return false;
        if (s.length() > t.length()){
            String temp = s;
            s = t;
            t = temp;
        }
        if (t.length() - s.length() > 1) return false;
        if (s.length() != t.length()) return deleted(s, t);
        else return replaced(s, t);
    }
}
