// C++

class Solution {
public:
    bool canJump(vector<int>& nums) {
        if (nums.size() == 1) return true;
        int end = 0, far = 0;
        for (int i = 0; i < nums.size() - 1; i++){
            far = max(i + nums[i], far);
            if (i == end) end = far;
        }
        return end >= nums.size() - 1;
    }
};

———————————————————————————————————————————————————————————————

// Java

class Solution {
    public boolean canJump(int[] nums) {
        if (nums.length == 1) return true;
        int end = 0, far = 0;
        for (int i = 0; i < nums.length - 1; i++){
            far = max(i + nums[i], far);
            if (i == end) end = far;
        }
        return end >= nums.length - 1;
    }
}
