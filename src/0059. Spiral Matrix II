// C++

class Solution {
public:
    vector<vector<int>> generateMatrix(int n) {
        vector<vector<int>> res (n, vector<int>(n));
        vector<vector<int>> m (n + 2, vector<int>(n + 2));
        for (int i = 0; i <= n + 1; i++)
            for (int j = 0; j <= n + 1; j++) m[i][j] = INT_MAX;
        for (int i = 1; i <= n; i++)
            for (int j = 1; j <= n; j++) m[i][j] = 0;
        int num = 1, dir = 1, r = 1, c = 1;
        int ud[4] = {-1, 0, 1, 0}, lr[4] = {0, 1, 0, -1};
        while (true){
            if (num == n * n + 1) break;
            res[r - 1][c - 1] = num;
            m[r][c] = INT_MAX;
            num++;
            if (dir == 0 && m[r - 1][c] == INT_MAX) dir = 1;
            else if (dir == 1 && m[r][c + 1] == INT_MAX) dir = 2;
            else if (dir == 2 && m[r + 1][c] == INT_MAX) dir = 3;
            else if (dir == 3 && m[r][c - 1] == INT_MAX) dir = 0;
            r += ud[dir];
            c += lr[dir];
        }
        return res;
    }
};

———————————————————————————————————————————————————————————————

// Java

class Solution {
    public int[][] generateMatrix(int n) {
        int[][] res = new int[n][n];
        int[][] m = new int[n + 2][n + 2];
        for (int i = 0; i <= n + 1; i++)
            for (int j = 0; j <= n + 1; j++) m[i][j] = Integer.MAX_VALUE;
        for (int i = 1; i <= n; i++)
            for (int j = 1; j <= n; j++) m[i][j] = 0;
        int num = 1, dir = 1, r = 1, c = 1;
        int[] ud = {-1, 0, 1, 0}, lr = {0, 1, 0, -1};
        while (true){
            if (num == n * n + 1) break;
            res[r - 1][c - 1] = num;
            num++;
            m[r][c] = Integer.MAX_VALUE;
            if (dir == 0 && m[r - 1][c] == Integer.MAX_VALUE) dir = 1;
            else if (dir == 1 && m[r][c + 1] == Integer.MAX_VALUE) dir = 2;
            else if (dir == 2 && m[r + 1][c] == Integer.MAX_VALUE) dir = 3;
            else if (dir == 3 && m[r][c - 1] == Integer.MAX_VALUE) dir = 0;
            r += ud[dir];
            c += lr[dir];
        }
        return res;
    }
}
