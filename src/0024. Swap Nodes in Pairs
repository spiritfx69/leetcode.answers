// C++

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
        ListNode* temp = new ListNode(-1);
        temp->next = head;
        ListNode* prev = temp;
        while (head != nullptr && head->next != nullptr){
            ListNode* n1 = head;
            ListNode* n2 = head->next;
            prev->next = n2;
            n1->next = n2->next;
            n2->next = n1;
            prev = n1;
            head = n1->next;
        }
        return temp->next;
    }
};

———————————————————————————————————————————————————————————————

// Java

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode swapPairs(ListNode head) {
        ListNode temp = new ListNode(-1);
        temp.next = head;
        ListNode prev = temp;
        while (head != null && head.next != null){
            ListNode n1 = head;
            ListNode n2 = head.next;
            prev.next = n2;
            n1.next = n2.next;
            n2.next = n1;
            prev = n1;
            head = n1.next;
        }
        return temp.next;
    }
}
