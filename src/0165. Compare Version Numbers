// C++

class Solution {
public:
    void makeVersion(string v, vector<int>& res){
        string s = "";
        for (int i = 0; i < v.length(); i++){
            if (v[i] == '.'){
                res.push_back(stoi(s));
                s = "";
            }
            else s += v[i];
        }
        res.push_back(stoi(s));
    }

    int compareVersion(string version1, string version2) {
        vector <int> v1, v2;
        makeVersion(version1, v1);
        makeVersion(version2, v2);
        while (v1.size() < v2.size()) v1.push_back(0);
        while (v2.size() < v1.size()) v2.push_back(0);
        for (int i = 0; i < v1.size(); i++){
            if (v1[i] < v2[i]) return -1;
            else if (v1[i] > v2[i]) return 1;
        }
        return 0;
    }
};

———————————————————————————————————————————————————————————————

// Java

class Solution {
    public void makeVersion(String v, List<Integer> res){
        String s = "";
        for (int i = 0; i < v.length(); i++){
            if (v.charAt(i) == '.'){
                res.add(Integer.valueOf(s));
                s = "";
            }
            else s += v.charAt(i);
        }
        res.add(Integer.valueOf(s));
    }

    public int compareVersion(String version1, String version2) {
        List <Integer> v1 = new ArrayList<Integer>();
        List <Integer> v2 = new ArrayList<Integer>();
        makeVersion(version1, v1);
        makeVersion(version2, v2);
        while (v1.size() < v2.size()) v1.add(0);
        while (v2.size() < v1.size()) v2.add(0);
        for (int i = 0; i < v1.size(); i++){
            if (v1.get(i) < v2.get(i)) return -1;
            else if (v1.get(i) > v2.get(i)) return 1;
        }
        return 0;
    }
}
