// C++

class Solution {
public:
    int findPeakElement(vector<int>& nums) {
        if (nums.size() == 1) return 0;
        int l = 0, r = nums.size() - 1;
        while (l + 1 < r){
            int m = (l + r) / 2;
            if (m == 0 || m == nums.size() - 1) return m;
            else if (nums[m - 1] < nums[m] && nums[m] < nums[m + 1]) l = m + 1;
            else if (nums[m - 1] > nums[m] && nums[m] > nums[m + 1]) r = m  - 1;
            else if (nums[m - 1] > nums[m] && nums[m] < nums[m + 1]){
                if (nums[m - 1] > nums[m + 1]) r = m - 1;
                else l = m + 1;
            }
            else return m;
        }
        if (nums[l] > nums[r]) return l;
        else return r;
    }
};

———————————————————————————————————————————————————————————————

// Java

class Solution {
    public int findPeakElement(int[] nums) {
        if (nums.length == 1) return 0;
        int l = 0, r = nums.length - 1;
        while (l + 1 < r){
            int m = (l + r) / 2;
            if (m == 0 || m == nums.length - 1) return m;
            else if (nums[m - 1] < nums[m] && nums[m] < nums[m + 1]) l = m + 1;
            else if (nums[m - 1] > nums[m] && nums[m] > nums[m + 1]) r = m  - 1;
            else if (nums[m - 1] > nums[m] && nums[m] < nums[m + 1]){
                if (nums[m - 1] > nums[m + 1]) r = m - 1;
                else l = m + 1;
            }
            else return m;
        }
        if (nums[l] > nums[r]) return l;
        else return r;
    }
}
