// C++

class Solution {
public:
    int minDistance(string word1, string word2) {
        int len1 = word1.length(), len2 = word2.length();
        vector<vector<int>> res (len1 + 1, vector<int>(len2 + 1));
        for (int i = 0; i <= len1; i++) res[i][0] = i;
        for (int i = 0; i <= len2; i++) res[0][i] = i;
        for (int i = 1; i <= len1; i++)
            for (int j = 1; j <= len2; j++){
                if (word1[i - 1] == word2[j - 1]) res[i][j] = res[i - 1][j - 1];
                else res[i][j] = min(res[i - 1][j - 1], min(res[i][j - 1], res[i - 1][j])) + 1;
            }
        return res[len1][len2];
    }
};

———————————————————————————————————————————————————————————————

// Java

class Solution {
    public int minDistance(String word1, String word2) {
        int len1 = word1.length(), len2 = word2.length();
        int[][] res = new int[len1 + 1][len2 + 1];
        for (int i = 0; i <= len1; i++) res[i][0] = i;
        for (int i = 0; i <= len2; i++) res[0][i] = i;
        for (int i = 1; i <= len1; i++)
            for (int j = 1; j <= len2; j++){
                if (word1.charAt(i - 1) == word2.charAt(j - 1)) res[i][j] = res[i - 1][j - 1];
                else res[i][j] = Math.min(res[i - 1][j - 1], Math.min(res[i][j - 1], res[i - 1][j])) + 1;
            }
        return res[len1][len2];
    }
}
