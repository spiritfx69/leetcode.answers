// C++

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* left = nullptr;
    bool stop = false;

    void reverse(ListNode* right, int m, int n){
        if (n == 1) return;
        right = right->next;
        if (m > 1) this->left = this->left->next;
        reverse(right, m - 1, n - 1);
        if (this->left == right || right->next == this->left) stop = true;
        if (!stop){
            int t = this->left->val;
            this->left->val = right->val;
            right->val = t;
            this->left = this->left->next;
        }
    }

    ListNode* reverseBetween(ListNode* head, int left, int right){
        this->left = head;
        reverse(head, left, right);
        return head;
    }
};

———————————————————————————————————————————————————————————————

// Java

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    private ListNode left = null;
    private boolean stop = false;

    void reverse(ListNode right, int m, int n) {
        if (n == 1) return;
        right = right.next;
        if (m > 1) this.left = this.left.next;
        reverse(right, m - 1, n - 1);
        if (this.left == right || right.next == this.left) stop = true;
        if (!stop) {
            int t = this.left.val;
            this.left.val = right.val;
            right.val = t;
            this.left = this.left.next;
        }
    }

    public ListNode reverseBetween(ListNode head, int left, int right) {
        this.left = head;
        reverse(head, left, right);
        return head;
    }
}
